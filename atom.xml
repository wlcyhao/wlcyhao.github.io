<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Horace's IT Blog！]]></title>
  <subtitle><![CDATA[仗剑红尘已是癫，有酒平步上青天，游星戏斗弄日月，醉卧云端笑人间！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wlcyhao.github.io/"/>
  <updated>2014-08-20T07:37:47.881Z</updated>
  <id>http://wlcyhao.github.io/</id>
  
  <author>
    <name><![CDATA[Horace]]></name>
    <email><![CDATA[wlcyhao@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ping服务器网速的工具]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/ping_network_speed/"/>
    <id>http://wlcyhao.github.io/2014/08/20/ping_network_speed/</id>
    <published>2014-08-20T07:35:44.000Z</published>
    <updated>2014-08-20T07:36:34.000Z</updated>
    <content type="html"><![CDATA[<p>购买vps之前评测中国用户访问速度，或者网站运营异常的时候测试网速，判断dns是否配置正确，都可以简单 ping一下，初步了解情况</p>
<ol>
<li>面向国内用户的中文网站，用 <a href="http://ping.chinaz.com/" target="_blank" rel="external">http://ping.chinaz.com/</a></li>
<li>面向全球用户的英文网站，用 <a href="http://www.just-ping.com/" target="_blank" rel="external">http://www.just-ping.com/</a></li>
</ol>
]]></content>
    
    
      <category term="ping" scheme="http://wlcyhao.github.io/tags/ping/"/>
    
      <category term="vps" scheme="http://wlcyhao.github.io/tags/vps/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[取消ubuntu让人崩溃的sudo]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/cacel_ubuntu_sudo/"/>
    <id>http://wlcyhao.github.io/2014/08/20/cacel_ubuntu_sudo/</id>
    <published>2014-08-20T07:23:35.000Z</published>
    <updated>2014-08-20T07:29:17.000Z</updated>
    <content type="html"><![CDATA[<p>使用Vagrant，因为大部分box都是基于ubuntu的，初始化之后，它会自动生成一个账号 <em>vagrant</em>，这货不是root，于是执行各种命令前都要加一个<code>sudo</code></p>
<p>本地虚拟机，就自己一个人用，还要sudo，这种脑残设定太恶心了</p>
<p>在ubuntu中取消默认的sudo，方法如下：</p>
<pre><code><span class="built_in">cd</span> ~
<span class="built_in">echo</span> <span class="string">"sudo bash"</span>&gt;&gt;.bash_login
</code></pre><p>重新登录之后，你就发现 root 在等你</p>
]]></content>
    
    
      <category term="ubuntu" scheme="http://wlcyhao.github.io/tags/ubuntu/"/>
    
      <category term="vagrant" scheme="http://wlcyhao.github.io/tags/vagrant/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3步做好vps安全防范]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/vps_safety/"/>
    <id>http://wlcyhao.github.io/2014/08/20/vps_safety/</id>
    <published>2014-08-20T07:19:21.000Z</published>
    <updated>2014-08-20T07:21:33.000Z</updated>
    <content type="html"><![CDATA[<p>如果有垃圾扫描vps的sshd端口，烦不胜烦，赶紧加强一下防范，图个清静</p>
<ol>
<li><code>passwd</code> 把登陆密码改成30位以上，越多越好，字母数字符号大小写都要包括，然后日常管理用ssh密钥对的方式登陆</li>
<li><p>改掉sshd标准的22端口，修改<code>/etc/ssh/sshd_config</code>这个文件即可，记得要重启sshd<br>&gt;<br> /etc/init.d/ssh restart</p>
</li>
<li><p>把 <code>iptables -I INPUT -p tcp -s 要封的IP --dport 骚扰的端口 -j DROP</code> 这条命令放在手边，随时可以执行</p>
</li>
</ol>
<p>攻击日志在/var/log/secure里面，经常查看，如果这个文件不存在,那么可以在 <code>/etc/syslog.conf</code> 里面配置</p>
]]></content>
    
    
      <category term="linux" scheme="http://wlcyhao.github.io/tags/linux/"/>
    
      <category term="安全" scheme="http://wlcyhao.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="ssh" scheme="http://wlcyhao.github.io/tags/ssh/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[提高ssh登录服务器的响应速度]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/ssh_login/"/>
    <id>http://wlcyhao.github.io/2014/08/20/ssh_login/</id>
    <published>2014-08-20T07:09:04.000Z</published>
    <updated>2014-08-20T07:11:11.000Z</updated>
    <content type="html"><![CDATA[<p>server A—&gt; server B</p>
<p>从A登录B，修改服务器B上的ssh配置文件: <code>/etc/ssh/sshd_config</code> 在文件尾部添加一行</p>
<p><code>UseDNS no</code></p>
<p>重启sshd，明显可以感觉到ssh登录速度的提升</p>
]]></content>
    
    
      <category term="ssh" scheme="http://wlcyhao.github.io/tags/ssh/"/>
    
      <category term="login" scheme="http://wlcyhao.github.io/tags/login/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[消除 vi 突然显示空格的颜色]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/vi_backspace_colour/"/>
    <id>http://wlcyhao.github.io/2014/08/20/vi_backspace_colour/</id>
    <published>2014-08-20T07:05:47.000Z</published>
    <updated>2014-08-20T07:06:57.000Z</updated>
    <content type="html"><![CDATA[<p>不知道为什么，用vi打开代码文件，空格的地方全部是黄色亮块，清楚办法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> ~</div><div class="line"></div><div class="line"><span class="keyword">open</span> .vimrc</div><div class="line"></div><div class="line">加入一行 <span class="keyword">set</span> nohls</div></pre></td></tr></table></figure>

<p>set nohls在vim里面可以直接用，只限于当前session，写入到vimrc中，可以持久化保存，vimrc里面还可以放入更多的配置指令</p>
<p>另外</p>
<p><code>cd -</code> 是个好命令，可以回到上一次路径</p>
]]></content>
    
    
      <category term="vim" scheme="http://wlcyhao.github.io/tags/vim/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修复secureCRT 登录 vps 中文乱码问题]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/securecrt_vps_bug/"/>
    <id>http://wlcyhao.github.io/2014/08/20/securecrt_vps_bug/</id>
    <published>2014-08-20T07:00:45.000Z</published>
    <updated>2014-08-20T07:02:19.000Z</updated>
    <content type="html"><![CDATA[<p>让vps正常显示中文，只需要三步</p>
<ol>
<li><p><code>vim ~/.profile</code> 加入下面一行 export LANG=”zh_CN.UTF-8”</p>
</li>
<li><p>修改SecureCRT 编码<br>选项-&gt;会话选项-&gt;外观-&gt;字符编码-&gt;uft-8，退出重新登录就行了</p>
</li>
<li><p>让vim支持中文显示，修改文件（如果没有就新建一个）:~/.vimrc，添加下面三行<br>```</p>
<ol>
<li>set encoding=utf-8</li>
<li>set fileencodings=utf-8,gb2312,gb18030,gbk</li>
<li>set termencoding=utf-8</li>
</ol>
</li>
</ol>
]]></content>
    
    
      <category term="linux" scheme="http://wlcyhao.github.io/tags/linux/"/>
    
      <category term="vps" scheme="http://wlcyhao.github.io/tags/vps/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用shell脚本监控vps实时流量]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/shell_monitor_vps/"/>
    <id>http://wlcyhao.github.io/2014/08/20/shell_monitor_vps/</id>
    <published>2014-08-20T06:52:13.000Z</published>
    <updated>2014-08-20T06:54:39.000Z</updated>
    <content type="html"><![CDATA[<p>一般来说，实时流量监控有两种方法</p>
<ul>
<li>安装iftop，它会通过ascii图形化显示实时流量数据，比较直观</li>
<li>用shell脚本采集<code>/proc/net/dev</code>中的实时数据，很简单，不依赖任何安装包，对于内网linux服务器特别有帮助</li>
</ul>
<a id="more"></a>

<p>脚本如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># test network width</span></div><div class="line"></div><div class="line">function usage</div><div class="line"></div><div class="line">{</div><div class="line"></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span>  "</span></div><div class="line"></div><div class="line">        <span class="built_in">echo</span> <span class="string">"    e.g. <span class="variable">$0</span> eth0 2"</span></div><div class="line"></div><div class="line">        <span class="keyword">exit</span> <span class="number">65</span></div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="operator">-lt</span> <span class="number">2</span> ];<span class="keyword">then</span></div><div class="line">usage</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">typeset</span> <span class="keyword">in</span> <span class="keyword">in</span>_old dif_<span class="keyword">in</span></div><div class="line"><span class="built_in">typeset</span> out out_old dif_out</div><div class="line"><span class="built_in">typeset</span> timer</div><div class="line"><span class="built_in">typeset</span> eth</div><div class="line"></div><div class="line">eth=<span class="variable">$1</span></div><div class="line">timer=<span class="variable">$2</span></div><div class="line"></div><div class="line"><span class="keyword">in</span>_old=$(cat /proc/net/dev | grep <span class="variable">$eth</span> | sed <span class="operator">-e</span> <span class="string">"s/\(.*\)\:\(.*\)/\2/g"</span> | awk <span class="string">' { print $1 }'</span> )</div><div class="line">out_old=$(cat /proc/net/dev | grep <span class="variable">$eth</span> | sed <span class="operator">-e</span> <span class="string">"s/\(.*\)\:\(.*\)/\2/g"</span> | awk <span class="string">' { print $9 }'</span> )</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span></div><div class="line"><span class="keyword">do</span></div><div class="line">sleep <span class="variable">${timer}</span></div><div class="line"><span class="keyword">in</span>=$(cat /proc/net/dev | grep <span class="variable">$eth</span> | sed <span class="operator">-e</span> <span class="string">"s/\(.*\)\:\(.*\)/\2/g"</span> | awk <span class="string">' { print $1 }'</span> )</div><div class="line">out=$(cat /proc/net/dev | grep <span class="variable">$eth</span> | sed <span class="operator">-e</span> <span class="string">"s/\(.*\)\:\(.*\)/\2/g"</span> | awk <span class="string">' { print $9 }'</span> )</div><div class="line">dif_<span class="keyword">in</span>=$(((<span class="keyword">in</span>-in_old)/timer))</div><div class="line">dif_out=$(((out-out_old)/timer))</div><div class="line"><span class="built_in">echo</span> <span class="string">"IN: <span class="variable">${dif_in}</span> Byte/s OUT: <span class="variable">${dif_out}</span> Byte/s "</span></div><div class="line"><span class="keyword">in</span>_old=<span class="variable">${in}</span></div><div class="line">out_old=<span class="variable">${out}</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="keyword">exit</span> <span class="number">0</span></div></pre></td></tr></table></figure>

<p>使用很简单，只有两个参数</p>
<ul>
<li>参数1， 网卡设备号，一般就是 eth0</li>
<li>参数2，统计间隔的秒数，2 表示2秒计算一次</li>
<li>流量统计单位是 Byte/s</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>一般来说，实时流量监控有两种方法</p>
<ul>
<li>安装iftop，它会通过ascii图形化显示实时流量数据，比较直观</li>
<li>用shell脚本采集<code>/proc/net/dev</code>中的实时数据，很简单，不依赖任何安装包，对于内网linux服务器特别有帮助</li>
</ul>
]]></summary>
    
      <category term="linux" scheme="http://wlcyhao.github.io/tags/linux/"/>
    
      <category term="iftop" scheme="http://wlcyhao.github.io/tags/iftop/"/>
    
      <category term="流量监控" scheme="http://wlcyhao.github.io/tags/%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一分钟学会crontab使用]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/master_crontab/"/>
    <id>http://wlcyhao.github.io/2014/08/20/master_crontab/</id>
    <published>2014-08-20T06:45:32.000Z</published>
    <updated>2014-08-20T06:47:14.000Z</updated>
    <content type="html"><![CDATA[<p>crontab 是在linux服务器上部署定时任务的方法</p>
<p><code>0 5 * * * /usr/bin/python /data/www/tools/mysql_backup.py</code></p>
<p>cmd之前有5个项目要填，分别对应</p>
<p><code>分钟 小时 天 月 一周当中第几天( 0-6 ,0表示星期天)</code><br><a id="more"></a><br>填写方法</p>
<ul>
<li><ul>
<li>表示都满足，例如 <em> </em> <em> </em> <em> 表示每分钟执行一次，如果每小时执行一次，那应该这样写<br>1 </em> <em> </em> * (每小时第一分钟执行，1可以随便改成60以内的数字)</li>
</ul>
</li>
<li>/n 表示隔n个单位执行一次  <ul>
<li>/3 <em> </em> <em> </em> 3分钟执行一次  </li>
<li>1 <em>/3 </em> <em> </em> 表示每隔3个小时的第一分钟执行一次  </li>
<li>1 1 <em>/3 </em> * 表示每隔3天，当天的1点1分执行一次  </li>
<li>1 12 <em> </em> 2,3,4,5,6 表示每周二到周6,每天中午12点1分执行  </li>
</ul>
</li>
</ul>
<p><strong>只需要掌握这2种时间用法，crontab就ok了</strong></p>
<p>提示：</p>
<ul>
<li>crontab 最小粒度是一分钟执行一次，要更快，得用其它办法，比如说写一个daemon程序,用while true: 来做</li>
<li><code>crontab -l</code> 查看所有crontab 列表</li>
<li><code>cronta -e</code>编辑crontab</li>
<li>crontab条目是以文件方式存储的，可以用<code>ls /etc/cron*</code>查看</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>crontab 是在linux服务器上部署定时任务的方法</p>
<p><code>0 5 * * * /usr/bin/python /data/www/tools/mysql_backup.py</code></p>
<p>cmd之前有5个项目要填，分别对应</p>
<p><code>分钟 小时 天 月 一周当中第几天( 0-6 ,0表示星期天)</code><br>]]></summary>
    
      <category term="linux" scheme="http://wlcyhao.github.io/tags/linux/"/>
    
      <category term="crontab" scheme="http://wlcyhao.github.io/tags/crontab/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[192.168.1.1/24是什么含义]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/1921681124/"/>
    <id>http://wlcyhao.github.io/2014/08/20/1921681124/</id>
    <published>2014-08-20T06:07:00.000Z</published>
    <updated>2014-08-20T06:10:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="IP的定义">IP的定义</h1>
<p>ip 是32位无符号整数，最小，最大分别是</p>
<ul>
<li>0.0.0.0 - 255.255.255.255 具体来说，由一个ip由 Net-ID+Host-ID 两部分组成，Net-ID 相同，那么就说明在一个网段内，可以用mac数据帧直接通信。</li>
</ul>
<p>给定一个Net-ID</p>
<ul>
<li>host-ID全为0的ip，(192.168.2.0)代表整子小网络，</li>
<li><p>host-ID全为1的ip，是这个子网络的广播地址<br>ip总共就32个字节，当 HostID 所占用的位越大，亦即 HostID 数量越多时，表示同一个网络内可用以设定主机的 IP 数量越多<br><a id="more"></a><br>国际NIC组织把ip分成5类</p>
</li>
<li><p>Class A : 0xxxxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx ==&gt; NetI_D 的开头是 0<br>|—net—|————-host——————|</p>
</li>
<li>Class B : 10xxxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx ==&gt; NetI_D 的开头是 10<br>|———net———-|———host———|</li>
<li>Class C : 110xxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx ==&gt; NetI_D 的开头是 110<br>|—————-net—————-|-host—|</li>
<li>Class D : 1110xxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx ==&gt; NetI_D 的开头是 1110</li>
<li>Class E : 1111xxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx ==&gt; NetI_D 的开头是 1111</li>
</ul>
<p>class D用作特殊用途，class E保留，因此，能够用来设定在一般系统上面的，就只有 Class A、B、C 三种等级的IP。</p>
<h1 id="Netmask">Netmask</h1>
<p>这个数值就是用一种很直观的方式表明Net-ID/Host-ID各有多少位</p>
<p>netmark的定义非常简单，netmask 也是 32 位，在数值上，位于 Net-ID 的为 1 而 Host-ID 为 0</p>
<p>例如一个常见的C类IP地址</p>
<p>&gt;<br>    net-id=24位，host-id=8位，拥有2**8-2=254个ip</p>
<p>一个传统的c类网络，比如 192.168.10.0，它的netmark是必然是255.255.255.0 如果在把这个网络分成2个子网络，很简单，设定net-id使用25位，host-id就只有7位了 那么这个时候的 netmark= 255.255.255.1 0000000 = 255.255.255.128，这次划分得到的两个子网分别是</p>
<ul>
<li>129.168.10.0/25</li>
<li>192.168.10.128/25</li>
</ul>
<p>&gt;<br>    python 自带的bin函数，可以非常方便的把int转换为二进制字符串表示</p>
<p>很显然，<code>/25</code>    <strong>就是标示 这个ip中net-id 占用的位数</strong>（这2个ip的host-id全部为0，所以这两个ip代表的是其所在的子网络）</p>
<p>这种表示方法很好计算子网络的规模，例如</p>
<ul>
<li>192.168.0.0/27 表示2的5(32-27=5)次方-2(每个网段的第一个和最后一个地址都被特殊用途占用)=62个ip</li>
<li>192.168.0.0/28,表示2的4(32-28=4)次方-2=30个ip</li>
</ul>
<p>所以 192.168.1.1/24 标示的是一个子网络192.168.1.0（拥有254个ip地址： 从192.168.1.1到192.168.1.254）</p>
]]></content>
    <summary type="html"><![CDATA[<h1 id="IP的定义">IP的定义</h1>
<p>ip 是32位无符号整数，最小，最大分别是</p>
<ul>
<li>0.0.0.0 - 255.255.255.255 具体来说，由一个ip由 Net-ID+Host-ID 两部分组成，Net-ID 相同，那么就说明在一个网段内，可以用mac数据帧直接通信。</li>
</ul>
<p>给定一个Net-ID</p>
<ul>
<li>host-ID全为0的ip，(192.168.2.0)代表整子小网络，</li>
<li><p>host-ID全为1的ip，是这个子网络的广播地址<br>ip总共就32个字节，当 HostID 所占用的位越大，亦即 HostID 数量越多时，表示同一个网络内可用以设定主机的 IP 数量越多<br>]]></summary>
    
      <category term="IP" scheme="http://wlcyhao.github.io/tags/IP/"/>
    
      <category term="网络" scheme="http://wlcyhao.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ssh指定私钥的配置管理]]></title>
    <link href="http://wlcyhao.github.io/2014/08/20/ssh_key/"/>
    <id>http://wlcyhao.github.io/2014/08/20/ssh_key/</id>
    <published>2014-08-20T03:40:50.000Z</published>
    <updated>2014-08-20T03:42:51.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ssh指定私钥的配置管理">ssh指定私钥的配置管理</h1>
<p>用ssh 公钥认证方式登录非常常见，快速方便，通常就是用<code>ssh-keygen -t rsa</code> 在 ~/.ssh 目录下生成默认名称的id_rsa和id_rsa.pub 文件</p>
<p>特别是git流行之后，用ssh的方式访问git服务器，部署起来最容易</p>
<p>实际上，ssh 私钥的名称和生成地点都可以单独指定的, <strong>和硬件操作系统无关</strong><br><a id="more"></a><br>你可以在任意一台服务器上生成 公钥,私钥对，保存起来，到处分发使用</p>
<p>指定的配置文件叫做 ssh_config , man ssh_config ，有详细说明</p>
<h2 id="个性化指定_私钥的步骤">个性化指定 私钥的步骤</h2>
<p>vi ~/.ssh/config文件，加入如下 配置行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>   Host xxxx</div><div class="line"><span class="number">2.</span>   IdentityFile 私钥文件名（不是id_rsa.pub)</div><div class="line"><span class="number">3.</span>   Port 端口号</div><div class="line"><span class="number">4.</span>   User 你登陆xxxx服务器用的账号</div><div class="line">     <span class="keyword">...</span></div></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>这个文件没有格式，一行一条记录，不需要tab缩进</li>
<li>你可以在这个文件里面指定多个Host</li>
<li>一个 Host开头的行 到下一个 Host开头的行 是 这个host的细节设置</li>
<li>全局的ssh config 文件在<code>/etc/ssh/ssh_config</code></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="ssh指定私钥的配置管理">ssh指定私钥的配置管理</h1>
<p>用ssh 公钥认证方式登录非常常见，快速方便，通常就是用<code>ssh-keygen -t rsa</code> 在 ~/.ssh 目录下生成默认名称的id_rsa和id_rsa.pub 文件</p>
<p>特别是git流行之后，用ssh的方式访问git服务器，部署起来最容易</p>
<p>实际上，ssh 私钥的名称和生成地点都可以单独指定的, <strong>和硬件操作系统无关</strong><br>]]></summary>
    
      <category term="ssh" scheme="http://wlcyhao.github.io/tags/ssh/"/>
    
      <category term="服务器运维" scheme="http://wlcyhao.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown语法入门]]></title>
    <link href="http://wlcyhao.github.io/2014/08/19/markdown_rumen/"/>
    <id>http://wlcyhao.github.io/2014/08/19/markdown_rumen/</id>
    <published>2014-08-19T09:29:11.000Z</published>
    <updated>2014-08-19T09:37:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="基本符号">基本符号</h2>
<ul>
<li>*,-,+ 3个符号效果都一样，这3个符号被称为<strong>Markdown</strong>符号</li>
<li>空白行表示另起一个段落</li>
<li>`是表示inline代码，tab是用来标记 代码段，分别对应html的code，pre标签</li>
</ul>
<h2 id="换行">换行</h2>
<ul>
<li>单一段落( \<p\>) 用一个空白行</p\></li>
<li>连续两个空格 会变成一个 \<br\></br\></li>
<li>连续3个符号，然后是空行，表示 hr横线</li>
</ul>
<a id="more"></a>

<h2 id="标题">标题</h2>
<ul>
<li>生成h1—h6,在文字前面加上 1—6个# 来实现</li>
<li>文字加粗是通过 文字左右各两个符号</li>
</ul>
<h2 id="引用">引用</h2>
<ul>
<li>在第一行加上 “&gt;”和一个空格，表示代码引用，还可以嵌套</li>
</ul>
<h2 id="列表">列表</h2>
<p>这个是markdown文件的主要表示方式，主题要点化</p>
<ul>
<li>使用*,+,-加上一个空格来表示</li>
<li>可以支持嵌套</li>
<li>有序列表用 数字+英文点+空格来表示</li>
<li>列表内容很长，不需要手工输入换行符，css控制段落的宽度，会自动的缩放的</li>
</ul>
<h2 id="链接">链接</h2>
<ul>
<li>直接写 [锚文本](url “可选的title”)</li>
<li>引用 先定义 [ref_name]:url，然后在需要写入url的地方， 这样使用[锚文本][ref_name]，通常的ref_name一般用数字表示，这样显得专业</li>
<li>简写url：用尖括号包裹url<br>这样生成的url锚文本就是url本身</li>
</ul>
<h2 id="插入图片">插入图片</h2>
<ul>
<li>一行表示: ![alt_text](url “可选的title”)</li>
<li>引用表示法: ![alt_text][id],预先定义 [id]:url “可选title”</li>
<li>直接使用<img>标签，这样可以指定图片的大小尺寸</li>
</ul>
<h2 id="特殊符号">特殊符号</h2>
<ul>
<li>用\来转义，表示文本中的markdown符号</li>
<li>可以在文本种直接使用html标签，但是要注意在使用的时候，前后加上空行</li>
<li>文本前后各加一个符号，表示斜体</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h2 id="基本符号">基本符号</h2>
<ul>
<li>*,-,+ 3个符号效果都一样，这3个符号被称为<strong>Markdown</strong>符号</li>
<li>空白行表示另起一个段落</li>
<li>`是表示inline代码，tab是用来标记 代码段，分别对应html的code，pre标签</li>
</ul>
<h2 id="换行">换行</h2>
<ul>
<li>单一段落( \<p\>) 用一个空白行</p\></li>
<li>连续两个空格 会变成一个 \<br\></br\></li>
<li>连续3个符号，然后是空行，表示 hr横线</li>
</ul>
]]></summary>
    
      <category term="Markdown" scheme="http://wlcyhao.github.io/tags/Markdown/"/>
    
      <category term="语法" scheme="http://wlcyhao.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="Markdown" scheme="http://wlcyhao.github.io/categories/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客优化：添加返回顶部功能]]></title>
    <link href="http://wlcyhao.github.io/2014/08/15/hexo_add_backtotop/"/>
    <id>http://wlcyhao.github.io/2014/08/15/hexo_add_backtotop/</id>
    <published>2014-08-15T15:21:26.000Z</published>
    <updated>2014-08-15T15:22:59.000Z</updated>
    <content type="html"><![CDATA[<p>1.添加HTML代码。新建文件 /themes/light/layout/_partial/totop.ejs ，在文件中加入HTML代码：</p>
<pre><code> <span class="tag">&lt;<span class="title">DIV</span> <span class="attribute">style</span>=<span class="value">"DISPLAY: none"</span> <span class="attribute">id</span>=<span class="value">goTopBtn</span> <span class="attribute">title</span>=<span class="value">"Scroll Back to Top"</span>&gt;</span><span class="tag">&lt;<span class="title">IMG</span> <span class="attribute">border</span>=<span class="value">0</span> <span class="attribute">src</span>=<span class="value">"&lt;%- config.root %&gt;images/top.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="title">DIV</span>&gt;</span>
 <span class="tag">&lt;<span class="title">SCRIPT</span> <span class="attribute">type</span>=<span class="value">text</span>/<span class="attribute">javascript</span>&gt;</span><span class="javascript">goTopEx();</span><span class="tag">&lt;/<span class="title">SCRIPT</span>&gt;</span>
</code></pre><p>2、在文件hemes/light/layout/_partial/head.ejs 添加</p>
<pre><code><span class="tag">&lt;<span class="title">SCRIPT</span> <span class="attribute">type</span>=<span class="value">text</span>/<span class="attribute">javascript</span> <span class="attribute">src</span>=<span class="value">"&lt;%- config.root %&gt;js/scrolltop.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">SCRIPT</span>&gt;</span>
</code></pre><a id="more"></a> 

<p>3.添加JS代码。新建文件 /themes/light/source/js/scrolltop.js，在文件中添加javascript代码：</p>
<pre><code> <span class="comment">// JavaScript Document</span>
<span class="function"><span class="keyword">function</span> <span class="title">goTopEx</span><span class="params">()</span></span>{
<span class="keyword">var</span> obj=<span class="built_in">document</span>.getElementById(<span class="string">"goTopBtn"</span>);
<span class="function"><span class="keyword">function</span> <span class="title">getScrollTop</span><span class="params">()</span></span>{
    <span class="keyword">return</span> <span class="built_in">document</span>.documentElement.scrollTop+<span class="built_in">document</span>.body.scrollTop;
}
<span class="function"><span class="keyword">function</span> <span class="title">setScrollTop</span><span class="params">(value)</span></span>{
    <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.scrollTop){
        <span class="built_in">document</span>.documentElement.scrollTop=value;
    }<span class="keyword">else</span>{
        <span class="built_in">document</span>.body.scrollTop=value;
    }
} 
<span class="built_in">window</span>.onscroll=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{getScrollTop()&gt;<span class="number">0</span>?obj.style.display=<span class="string">""</span>:obj.style.display=<span class="string">"none"</span>;}
obj.onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> goTop=setInterval(scrollMove,<span class="number">10</span>);
    <span class="function"><span class="keyword">function</span> <span class="title">scrollMove</span><span class="params">()</span></span>{
        setScrollTop(getScrollTop()/<span class="number">1.1</span>);
        <span class="keyword">if</span>(getScrollTop()&lt;<span class="number">1</span>)clearInterval(goTop);
    }
}
}
</code></pre><p>4、在目录themes/light/source/css/_partial新建文件scrolltop.styl，内容如下：</p>
<pre><code> <span class="id">#goTopBtn</span>
  <span class="attribute">POSITION</span> <span class="value">fixed</span>
  <span class="attribute">TEXT-ALIGN</span> <span class="value">center</span>
  -<span class="attribute">HEIGHT</span> 30px
   <span class="attribute">WIDTH</span> 45px
   <span class="attribute">BOTTOM</span> 35px
   <span class="attribute">HEIGHT</span> 47px
   <span class="attribute">FONT-SIZE</span> 12px
   <span class="attribute">CURSOR</span> <span class="value">pointer</span>
   <span class="attribute">RIGHT</span> 10px
   _position <span class="value">absolute</span>
   _right <span class="attribute">auto</span>
</code></pre><p>5、在文件themes/light/source/css/style.styl添加：</p>
<pre><code>@<span class="keyword">import</span> <span class="string">'_partial/scrolltop'</span>
</code></pre><p>6、添加按钮图片，将图片复制到themes/light/source/images，文件名为top.jpg</p>
]]></content>
    <summary type="html"><![CDATA[<p>1.添加HTML代码。新建文件 /themes/light/layout/_partial/totop.ejs ，在文件中加入HTML代码：</p>
<pre><code> <span class="tag">&lt;<span class="title">DIV</span> <span class="attribute">style</span>=<span class="value">"DISPLAY: none"</span> <span class="attribute">id</span>=<span class="value">goTopBtn</span> <span class="attribute">title</span>=<span class="value">"Scroll Back to Top"</span>&gt;</span><span class="tag">&lt;<span class="title">IMG</span> <span class="attribute">border</span>=<span class="value">0</span> <span class="attribute">src</span>=<span class="value">"&lt;%- config.root %&gt;images/top.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="title">DIV</span>&gt;</span>
 <span class="tag">&lt;<span class="title">SCRIPT</span> <span class="attribute">type</span>=<span class="value">text</span>/<span class="attribute">javascript</span>&gt;</span><span class="javascript">goTopEx();</span><span class="tag">&lt;/<span class="title">SCRIPT</span>&gt;</span>
</code></pre><p>2、在文件hemes/light/layout/_partial/head.ejs 添加</p>
<pre><code><span class="tag">&lt;<span class="title">SCRIPT</span> <span class="attribute">type</span>=<span class="value">text</span>/<span class="attribute">javascript</span> <span class="attribute">src</span>=<span class="value">"&lt;%- config.root %&gt;js/scrolltop.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">SCRIPT</span>&gt;</span>
</code></pre>]]></summary>
    
      <category term="hexo" scheme="http://wlcyhao.github.io/tags/hexo/"/>
    
      <category term="返回顶部" scheme="http://wlcyhao.github.io/tags/%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8/"/>
    
      <category term="Hexo" scheme="http://wlcyhao.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo博客的优化技巧]]></title>
    <link href="http://wlcyhao.github.io/2014/08/15/hexo_yohua/"/>
    <id>http://wlcyhao.github.io/2014/08/15/hexo_yohua/</id>
    <published>2014-08-15T12:37:43.000Z</published>
    <updated>2014-08-15T12:44:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="添加“多说”评论">添加“多说”评论</h2>
<p>1、在<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>进行注册，获得通用代码。<br>2、将通用代码粘贴到themes<em>\light\layout_partial\comment.ejs</em>里面，如下：  </p>
<pre><code><span class="vbscript">&lt;% <span class="keyword">if</span> ( page.comments){ %&gt;</span>
<span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span>
通用代码
<span class="tag">&lt;/<span class="title">section</span>&gt;</span>
<span class="vbscript">&lt;% } %&gt;</span>
</code></pre><p><a id="more"></a>  </p>
<h2 id="添加『页面导航』">添加『页面导航』</h2>
<p>在刚才添加「多说」评论的文件中，加入一段代码，如下：</p>
<pre><code><span class="vbscript">&lt;% <span class="keyword">if</span> ( page.comments){ %&gt;</span>
<span class="tag">&lt;<span class="title">nav</span> <span class="attribute">id</span>=<span class="value">"pagination"</span> &gt;</span>
<span class="vbscript">&lt;% <span class="keyword">if</span> (page.prev) { %&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;"</span> <span class="attribute">class</span>=<span class="value">"alignleft prev"</span> &gt;</span><span class="vbscript">&lt;%= __(<span class="comment">'prev') %&gt;</span></span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="vbscript">&lt;% } %&gt;</span>
<span class="vbscript">&lt;% <span class="keyword">if</span> (page.<span class="keyword">next</span>) { %&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;"</span> <span class="attribute">class</span>=<span class="value">"alignright next"</span> &gt;</span><span class="vbscript">&lt;%= __(<span class="comment">'next') %&gt;</span></span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="vbscript">&lt;% } %&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">nav</span>&gt;</span>
<span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span>
</code></pre><h2 id="添加“百度分享”">添加“百度分享”</h2>
<p>到百度分享获得代码，在themes/light/layout/_partial/article.ejs中，将&lt;%-partial(‘post/share’)%&gt;删掉，替换为百度分享的代码。</p>
<h2 id="添加小图标">添加小图标</h2>
<p>在themes/light/layout/_partial/head.ejs里将<link href="<%- config.root %>favicon.png" rel="icon">替换为<link href="<%- config.root %>favicon.ico" rel="icon" type="image/x-ico">。将favicon.ico图标文件放在source目录下。制作图标的网站，<a href="http://www.faviconer.com。" target="_blank" rel="external">http://www.faviconer.com。</a></p>
<h2 id="添加分类、标签云widget">添加分类、标签云widget</h2>
<p>很简单，在themes/light/_config.yml中，添加如下：</p>
<pre><code> widgets:
 -<span class="ruby"> category
</span> -<span class="ruby"> tagcloud</span>
</code></pre><h2 id="添加友情链接widget">添加友情链接widget</h2>
<p>在themes/light/layout/_widget中新建名为blogroll.ejs的文件，编辑内容如下：</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"widget tag"</span>&gt;</span>
<span class="tag">&lt;<span class="title">h3</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://wlcyhao.github.io/"</span> <span class="attribute">title</span>=<span class="value">"Horace's  IT Blog！"</span>&gt;</span>Horace<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>在themes/light/_config.yml中，添加如下：</p>
<pre><code>widget<span class="variable">s:</span>
- blogroll
</code></pre><h2 id="生成post时默认生成categories配置项">生成post时默认生成categories配置项</h2>
<p>在scaffolds/post.md中，添加一行categories:。同理可应用在page.md和photo.md。</p>
<h2 id="导航栏添加”关于”">导航栏添加”关于”</h2>
<p> 1、hexo new page “about”<br> 2、到source/about/index.md编辑内容。<br> 3、在themes/light/_config.yml中，添加如下：</p>
<pre><code><span class="keyword">menu</span>:
 关于: /<span class="keyword">about</span>
</code></pre><h2 id="主页文章显示摘要">主页文章显示摘要</h2>
<p>编辑md文件的时候，在要作为摘要的文字后面添加\&lt;!—more—&gt;即可。</p>
<h2 id="添加RSS">添加RSS</h2>
<p>hexo提供了RSS的生成插件，需要手动安装和设置。步骤如下：<br>安装RSS插件到本地：npm install hexo-generator-feed<br>开启RSS功能：编辑hexo/_config.yml，添加如下代码：</p>
<pre><code>plugin<span class="variable">s:</span>
- hexo-generator-feed
</code></pre><p>在站点添加链接：<br>在 <strong>themes/light/_config.yml</strong> 中，编辑<strong>rss: /atom.xml</strong><br>在<strong>themes/light/layout/_partial/header</strong>，`<ul></ul>之间，添加一样代码  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">&lt;li&gt;</span> &lt;a href=<span class="string">"/atom.xml"</span>&gt;<span class="constant">RSS</span>&lt;<span class="regexp">/a&gt; &lt;/li</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="文章中插入图片">文章中插入图片</h2>
<p>使用markdown写文章，插入图片的格式为:![图片名称](链接地址)，这里要说的是链接地址怎么写。对于hexo，有两种方式：<br>1、使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。<br>2、使用微博图床，地址<a href="http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。" target="_blank" rel="external">http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。</a></p>
<h2 id="加入「fork_me_on_github」">加入「fork me on github」</h2>
<p><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">这里</a>有 github 给出的教程，把代码插入到任意一个全局的模板文件中就行，比如layout.ejs的末尾。</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="添加“多说”评论">添加“多说”评论</h2>
<p>1、在<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>进行注册，获得通用代码。<br>2、将通用代码粘贴到themes<em>\light\layout_partial\comment.ejs</em>里面，如下：  </p>
<pre><code><span class="vbscript">&lt;% <span class="keyword">if</span> ( page.comments){ %&gt;</span>
<span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span>
通用代码
<span class="tag">&lt;/<span class="title">section</span>&gt;</span>
<span class="vbscript">&lt;% } %&gt;</span>
</code></pre><p>]]></summary>
    
      <category term="hexo" scheme="http://wlcyhao.github.io/tags/hexo/"/>
    
      <category term="优化" scheme="http://wlcyhao.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="Hexo" scheme="http://wlcyhao.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于上传文件到github的方法]]></title>
    <link href="http://wlcyhao.github.io/2014/08/09/upload-to-github/"/>
    <id>http://wlcyhao.github.io/2014/08/09/upload-to-github/</id>
    <published>2014-08-09T12:47:37.000Z</published>
    <updated>2014-08-09T13:07:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="第一步、建立先仓库">第一步、建立先仓库</h2>
<p>第一步的话看一般的提示就知道了，在github新建一个repository（谷歌可以解决），都是可视化的界面操作，所以难度不大。或者看这里：<a href="https://help.github.com/articles/create-a-repo" target="_blank" rel="external">官方help</a> ，虽然是英文的，但是基本都是图和代码，所以很容易读懂。</p>
<p>在github首页的右上角，点击红框中的Create New Repo。<br><img src="/img/2012082415173733.png" alt="Create New Repo"></p>
<p><a id="more"></a><br>进入新建仓库的界面  </p>
<p><img src="/img/2012082416481736.png" alt="Create repository"></p>
<p>填一下仓库名称，Initialize this repository with a README是可选的，不过本人建议最好选上，可以在后面省一个步骤。填好之后，点Create repository就行了。  </p>
<h2 id="第二步、克隆仓库">第二步、克隆仓库</h2>
<p>第二步开始就基本进入命令行模式了，不过要先从github上下载命令行工具。<a href="http://windows.github.com/" target="_blank" rel="external">下载地址</a></p>
<p>然后进行简单的安装之后，会在桌面上创建两个图标，GitHub和Git Shell，GitHub是图形界面，Git Shell是命令行模式，而且默认的Git仓库是建在C盘的，建议要把路径重设下。</p>
<p>点开Git Shell，进入命令行。首先我们先要把GitHub上的我们新建的仓库clone下来，为了演示，我在GitHub上新建了一个名称为myRepoForBlog的git。</p>
<p>在初始化版本库之前，先要确认认证的公钥是否正确，如下：</p>
<pre><code>
ssh -T git@github.com
</code></pre>

<p>正确地结果如下：</p>
<pre><code>
Warning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.  
Hi findingsea! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>会有一个Warning，不用理会。</p>
<p>接下来对库进行clone，如下：</p>
<pre><code>
git clone https://github.com/findingsea/myRepoForBlog.git
</code></pre>

<p>上面的地址可以在如下界面找到：</p>
<p><img src="/img/2012082417211682.png" alt="Create repository"></p>
<p>clone成功如下：</p>
<pre><code>
Cloning into 'myRepoForBlog'...
Warning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
</code></pre>

<h2 id="第三步、上传README-md文件">第三步、上传README.md文件</h2>
<p>这个时候，我们的GitHub文件夹下就多了一个myRepoForBlog文件夹，进入文件夹目录，对仓库进行初始化，如果我们之前没有勾选创建README，则要先创建README.md文件，不然上传文件会报错。如果在第一步就勾选过了<strong>Initialize this repository with a README</strong>,<br>则可以直接进入第四步。</p>
<pre><code>
git init  
touch README.md  
git add README.md  
git commit -m 'first_commit'  
git remote add origin https://github.com/findingsea/  myRepoForBlog.git
git push origin master
</code></pre>

<h2 id="第四步、push文件">第四步、push文件</h2>
<p>创建完README.md后，就可以push了，代码类似。</p>
<pre><code>
git add .  
git commit -m 'first_commit'  
git remote add origin https://github.com/findingsea/myRepoForBlog.git  
git push origin master  
</code></pre>

<p>如果执行</p>
<pre><code>
git remote add origin https://github.com/findingsea/myRepoForBlog.git，
</code></pre>

<p>出现错误：</p>
<pre><code>
fatal: remote origin already exists
</code></pre>

<p>则执行以下语句：</p>
<pre><code>
git remote rm origin
</code></pre>

<p>再往后执行</p>
<pre><code>
git remote add origin https://github.com/findingsea/myRepoForBlog.git
</code></pre>


<p>再执行</p>
<pre><code>
git push origin master
</code></pre>

<p>如果出现报错：</p>
<pre><code>
error:failed to push som refs to.......
</code></pre>

<p>则执行以下语句：</p>
<pre><code>
git pull origin master
</code></pre>

<p>先把远程服务器github上面的文件拉先来，再push 上去。</p>
<p>【结束】</p>
<p>再次要强调这篇文章主要是对初学者的，也就我这种github菜鸟的。</p>
<p>最后感谢那些无私分享自己经验和知识的博主们。</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="第一步、建立先仓库">第一步、建立先仓库</h2>
<p>第一步的话看一般的提示就知道了，在github新建一个repository（谷歌可以解决），都是可视化的界面操作，所以难度不大。或者看这里：<a href="https://help.github.com/articles/create-a-repo" target="_blank" rel="external">官方help</a> ，虽然是英文的，但是基本都是图和代码，所以很容易读懂。</p>
<p>在github首页的右上角，点击红框中的Create New Repo。<br><img src="/img/2012082415173733.png" alt="Create New Repo"></p>
<p>]]></summary>
    
      <category term="github" scheme="http://wlcyhao.github.io/tags/github/"/>
    
      <category term="上传文件" scheme="http://wlcyhao.github.io/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    
      <category term="github" scheme="http://wlcyhao.github.io/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cisco交换机接口模式精解]]></title>
    <link href="http://wlcyhao.github.io/2014/08/09/cisco-swith-interface-mode/"/>
    <id>http://wlcyhao.github.io/2014/08/09/cisco-swith-interface-mode/</id>
    <published>2014-08-09T06:56:54.000Z</published>
    <updated>2014-08-09T07:14:11.000Z</updated>
    <content type="html"><![CDATA[<p>cisco网络中，交换机在局域网中最终稳定状态的接口类型主要有四种：access/ trunk/ multi/ dot1q-tunnel。  </p>
<p>1、access: 主要用来接入终端设备，如PC机、服务器、打印服务器等。<br>2、trunk: 主要用在连接其它交换机，以便在线路上承载多个vlan。<br>3、multi: 在一个线路中承载多个vlan，但不像trunk,它不对承载的数据打 标签。主要用于接入支持多vlan的服务器或者一些网络分析设备。现在基本不使用此类接口，在cisco的网络设备中，也基本不支持此类接口了。<br>4、dot1q-tunnel: 用在Q-in-Q隧道配置中。<br><a id="more"></a><br>Cisco网络设备支持动态协商端口的工作状态，这为网络设备的实施提供了一定的方便（但不建议使用动态方式）。cisco动态协商协议从最初的DISL（Cisco私有协议）发展到DTP（公有协议）。根据动态协议的实现方式，Cisco网络设备接口主要分为下面几种模式：</p>
<p>1、switchport mode access:  强制接口成为access接口，并且可以与对方主动进行协商，诱使对方成为access模式。<br>2、switchport mode dynamic desirable:  主动与对协商成为Trunk接口的可能性，如果邻居接口模式为Trunk/desirable/auto之一，则接口将变成trunk接口工作。如果不能形成trunk模式，则工作在access模式。这种模式是现在交换机的默认模式。<br>3、switchport mode dynamic auto:  只有邻居交换机主动与自己协商时才会变成Trunk接口，所以它是一种被动模式，当邻居接口为Trunk／desirable之一时，才会成为Trunk。如果不能形成trunk模式，则工作在access模式。<br>4、switchport mode trunk:  强制接口成为Trunk接口，并且主动诱使对方成为Trunk模式，所以当邻居交换机接口为trunk/desirable/auto时会成为Trunk接口。<br>5、switchport nonegotiate:  严格的说，这不算是种接口模式，它的作用只是阻止交换机接口发出DTP数据包，它必须与switchport mode trunk或者switchport mode access一起使用。<br>6、switchport mode dot1q-tunnel：　配置交换机接口为隧道接口（非Trunk），以便与用户交换机的Trunk接口形成不对称链路。</p>
]]></content>
    <summary type="html"><![CDATA[<p>cisco网络中，交换机在局域网中最终稳定状态的接口类型主要有四种：access/ trunk/ multi/ dot1q-tunnel。  </p>
<p>1、access: 主要用来接入终端设备，如PC机、服务器、打印服务器等。<br>2、trunk: 主要用在连接其它交换机，以便在线路上承载多个vlan。<br>3、multi: 在一个线路中承载多个vlan，但不像trunk,它不对承载的数据打 标签。主要用于接入支持多vlan的服务器或者一些网络分析设备。现在基本不使用此类接口，在cisco的网络设备中，也基本不支持此类接口了。<br>4、dot1q-tunnel: 用在Q-in-Q隧道配置中。<br>]]></summary>
    
      <category term="cisco" scheme="http://wlcyhao.github.io/tags/cisco/"/>
    
      <category term="交换机" scheme="http://wlcyhao.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="Swtitch&amp;Router" scheme="http://wlcyhao.github.io/categories/Swtitch&Router/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[交换机&路由器命令小全（带中文注释）]]></title>
    <link href="http://wlcyhao.github.io/2014/08/09/switch-and-router-command/"/>
    <id>http://wlcyhao.github.io/2014/08/09/switch-and-router-command/</id>
    <published>2014-08-09T06:45:22.000Z</published>
    <updated>2014-08-09T06:59:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_交换机支持的命令：">1. 交换机支持的命令：</h2>
<p>交换机基本状态： </p>
<pre><code>
switch: ；ROM状态， 路由器是rommon>

hostname> ；用户模式

hostname# ；特权模式

hostname(config)# ；全局配置模式

hostname(config-if)# ；接口状态
</code></pre>
<a id="more"></a>
交换机口令设置： 

<pre><code>
switch>enable ；进入特权模式

switch#config terminal ；进入全局配置模式

switch(config)#hostname  ；设置交换机的主机名

switch(config)#enable secret xxx ；设置特权加密口令

switch(config)#enable password xxa ；设置特权非密口令

switch(config)#line console 0 ；进入控制台口

switch(config-line)#line vty 0 4 ；进入虚拟终端

switch(config-line)#login ；允许登录

switch(config-line)#password xx ；设置登录口令xx

switch#exit ；返回命令

</code></pre>

<p>交换机VLAN设置：</p>
<pre><code>
switch#vlan database ；进入VLAN设置

switch(vlan)#vlan 2 ；建VLAN 2

switch(vlan)#no vlan 2 ；删vlan 2

switch(config)#int f0/1 ；进入端口1

switch(config-if)#switchport access vlan 2 ；当前端口加入vlan 2

switch(config-if)#switchport mode trunk ；设置为干线

switch(config-if)#switchport trunk allowed vlan 1，2 ；设置允许的vlan

switch(config-if)#switchport trunk encap dot1q ；设置vlan 中继

switch(config)#vtp domain  ；设置发vtp域名

switch(config)#vtp password  ；设置发vtp密码

switch(config)#vtp mode server ；设置发vtp模式

switch(config)#vtp mode client ；设置发vtp模式
</code></pre>

<p>交换机设置IP地址：</p>
<pre><code>
switch(config)#interface vlan 1 ；进入vlan 1

switch(config-if)#ip address   ；设置IP地址

switch(config)#ip default-gateway  ；设置默认网关

switch#dir flash: ；查看闪存
</code></pre>

<p>交换机显示命令：</p>
<pre><code>
switch#write ；保存配置信息

switch#show vtp ；查看vtp配置信息

switch#show run ；查看当前配置信息

switch#show vlan ；查看vlan配置信息

switch#show interface ；查看端口信息

switch#show int f0/0 ；查看指定端口信息    
</code></pre>

<h2 id="2-_路由器支持的命令：">2. 路由器支持的命令：</h2>
<p>路由器显示命令：</p>
<pre><code>
router#show run ；显示配置信息

router#show interface ；显示接口信息

router#show ip route ；显示路由信息

router#show cdp nei ；显示邻居信息

router#reload 　 　 ；重新起动
</code></pre>

<p>路由器口令设置：</p>
<pre><code>
router>enable ；进入特权模式

router#config terminal ；进入全局配置模式

router(config)#hostname  ；设置交换机的主机名

router(config)#enable secret xxx ；设置特权加密口令

router(config)#enable password xxb ；设置特权非密口令

router(config)#line console 0 ；进入控制台口

router(config-line)#line vty 0 4 ；进入虚拟终端

router(config-line)#login ；要求口令验证

router(config-line)#password xx ；设置登录口令xx

router(config)#(Ctrl+z) ； 返回特权模式

router#exit ；返回命令
</code></pre>

<p>路由器配置：</p>
<pre><code>
router(config)#int s0/0 ；进入Serail接口

router(config-if)#no shutdown ；激活当前接口

router(config-if)#clock rate 64000 ；设置同步时钟

router(config-if)#ip address   ；设置IP地址

router(config-if)#ip address  second ；设置第二个IP

router(config-if)#int f0/0.1 ；进入子接口

router(config-subif.1)#ip address  ；设置子接口IP

router(config-subif.1)#encapsulation dot1q  ；绑定vlan中继协议

router(config)#config-register 0x2142 ；跳过配置文件

router(config)#config-register 0x2102 ；正常使用配置文件

router#reload ；重新引导
</code></pre>

<p>路由器文件操作：</p>
<pre><code>
router#copy running-config startup-config ；保存配置

router#copy running-config tftp ；保存配置到tftp

router#copy startup-config tftp ；开机配置存到tftp

router#copy tftp flash: ；下传文件到flash

router#copy tftp startup-config；下载配置文件
ROM状态：

Ctrl+Break ；进入ROM监控状态

rommon>confreg 0x2142 ；跳过配置文件

rommon>confreg 0x2102 ；恢复配置文件

rommon>reset　 ；重新引导

rommon>copy xmodem: flash: ；从console传输文件
rommon>IP_ADDRESS=10.65.1.2 ；设置路由器IP

rommon>IP_SUBNET_MASK=255.255.0.0 ；设置路由器掩码

rommon>TFTP_SERVER=10.65.1.1 ；指定TFTP服务器IP

rommon>TFTP_FILE=c2600.bin ；指定下载的文件

rommon>tftpdnld ；从tftp下载

rommon>dir flash: ；查看闪存内容

rommon>boot ；引导IOS
</code></pre>

<p>静态路由：</p>
<pre><code>
ip route    ；命令格式

router(config)#ip route 2.0.0.0 255.0.0.0 1.1.1.2 ；静态路由举例

router(config)#ip route 0.0.0.0 0.0.0.0 1.1.1.2 ；默认路由举例
</code></pre>

<p>动态路由：</p>
<pre><code>
router(config)#ip routing ；启动路由转发

router(config)#router rip ；启动RIP路由协议。

router(config-router)#network  ；设置发布路由

router(config-router)#negihbor  ；点对点帧中继用。
</code></pre>

<p>帧中继命令：</p>
<pre><code>
router(config)#frame-relay switching ；使能帧中继交换

router(config-s0)#encapsulation frame-relay ；使能帧中继

router(config-s0)#fram-relay lmi-type cisco ；设置管理类型

router(config-s0)#frame-relay intf-type DCE ；设置为DCE

router(config-s0)#frame-relay dlci 16 ；

router(config-s0)#frame-relay local-dlci 20 ；设置虚电路号

router(config-s0)#frame-relay interface-dlci 16 ；

router(config)#log-adjacency-changes ；记录邻接变化

router(config)#int s0/0.1 point-to-point ；设置子接口点对点

router#show frame pvc ；显示永久虚电路

router#show frame map ；显示映射 
</code></pre>

<p>基本访问控制列表：</p>
<pre><code>
router(config)#access-list  permit|deny  

router(config)#interface  ；default:deny any

router(config-if)#ip access-group  in|out ；default:out
例1：

router(config)#access-list 4 permit 10.8.1.1

router(config)#access-list 4 deny 10.8.1.0 0.0.0.255

router(config)#access-list 4 permit 10.8.0.0 0.0.255.255

router(config)#access-list 4 deny 10.0.0.0 0.255.255.255

router(config)#access-list 4 permit any

router(config)#int f0/0

router(config-if)#ip access-group 4 in
</code></pre>

<p>扩展访问控制列表：</p>
<pre><code>
access-list  permit|deny icmp  <destinationip wild="">[type]

access-list  permit|deny tcp  <destinationip wild="">[port]

例2：

router(config)#access-list 101 deny icmp any 10.64.0.2 0.0.0.0 echo

router(config)#access-list 101 permit ip any any

router(config)#int s0/0

router(config-if)#ip access-group 101 in

例3：

router(config)#access-list 102 deny tcp any 10.65.0.2 0.0.0.0 eq 80

router(config)#access-list 102 permit ip any any

router(config)#interface s0/1

router(config-if)#ip access-group 102 out
</destinationip></destinationip></code></pre>

<p>删除访问控制例表:</p>
<pre><code>
router(config)#no access-list 102

router(config-if)#no ip access-group 101 in
</code></pre>

<p>路由器的nat配置</p>
<pre><code>
Router(config-if)#ip nat inside ；当前接口指定为内部接口

Router(config-if)#ip nat outside ；当前接口指定为外部接口

Router(config)#ip nat inside source static [p] <私有ip><公网ip> [port]

Router(config)#ip nat inside source static 10.65.1.2 60.1.1.1

Router(config)#ip nat inside source static tcp 10.65.1.3 80 60.1.1.1 80

Router(config)#ip nat pool p1 60.1.1.1 60.1.1.20 255.255.255.0

Router(config)#ip nat inside source list 1 pool p1

Router(config)#ip nat inside destination list 2 pool p2

Router(config)#ip nat inside source list 2 interface s0/0 overload

Router(config)#ip nat pool p2 10.65.1.2 10.65.1.4 255.255.255.0 type rotary

Router#show ip nat translation

rotary 参数是轮流的意思，地址池中的IP轮流与NAT分配的地址匹配。

overload参数用于PAT 将内部IP映射到一个公网IP不同的端口上。
</公网ip></私有ip></code></pre>

<p>外部网关协议配置：</p>
<pre><code>
routerA(config)#router bgp 100

routerA(config-router)#network 19.0.0.0

routerA(config-router)#neighbor 8.1.1.2 remote-as 200
</code></pre>

<p>配置PPP验证：</p>
<pre><code>
RouterA(config)#username  password 

RouterA(config)#int s0

RouterA(config-if)#ppp authentication {chap|pap}
</code></pre>

<p>3．PIX防火墙命令</p>
<pre><code>
Pix525(config)#nameif ethernet0 outside security0 ；命名接口和级别

Pix525(config)#interface ethernet0 auto ；设置接口方式

Pix525(config)#interface ethernet1 100full ；设置接口方式

Pix525(config)#interface ethernet1 100full shutdown

Pix525(config)#ip address inside 192.168.0.1 255.255.255.0

Pix525(config)#ip address outside 133.0.0.1 255.255.255.252
Pix525(config)#global (if_name) natid ip-ip ；定义公网IP区间

Pix525(config)#global (outside) 1 7.0.0.1-7.0.0.15 ；例句

Pix525(config)#global (outside) 1 133.0.0.1 ；例句

Pix525(config)#no global (outside) 1 133.0.0.1 ；去掉设置
Pix525(config)#nat (if_name) nat_id local_ip [netmark]

Pix525(config)#nat (inside) 1 0 0

内网所有主机(0代表0.0.0.0)可以访问global 1指定的外网。

Pix525(config)#nat (inside) 1 172.16.5.0 255.255.0.0

内网172.16.5.0/16网段的主机可以访问global 1指定的外网。
Pix525(config)#route if_name 0 0 gateway_ip [metric] ；命令格式

Pix525(config)#route outside 0 0 133.0.0.1 1 ；例句

Pix525(config)#route inside 10.1.0.0 255.255.0.0 10.8.0.1 1 ；例句
Pix525(config)#static (inside， outside) 133.0.0.1 192.168.0.8

表示内部ip地址192.168.0.8，访问外部时被翻译成133.0.0.1全局地址。
Pix525(config)#static (dmz， outside) 133.0.0.1 172.16.0.8

中间区域ip地址172.16.0.8，访问外部时被翻译成133.0.0.1全局地址。
</code></pre>]]></content>
    <summary type="html"><![CDATA[<h2 id="1-_交换机支持的命令：">1. 交换机支持的命令：</h2>
<p>交换机基本状态： </p>
<pre><code>
switch: ；ROM状态， 路由器是rommon>

hostname> ；用户模式

hostname# ；特权模式

hostname(config)# ；全局配置模式

hostname(config-if)# ；接口状态
</code></pre>
]]></summary>
    
      <category term="交换机" scheme="http://wlcyhao.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="路由器" scheme="http://wlcyhao.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="Swtitch&amp;Router" scheme="http://wlcyhao.github.io/categories/Swtitch&Router/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Oracle RAC安装过程中碰到问题及解决方法]]></title>
    <link href="http://wlcyhao.github.io/2014/08/09/RAC-Promblem-solution/"/>
    <id>http://wlcyhao.github.io/2014/08/09/RAC-Promblem-solution/</id>
    <published>2014-08-09T03:19:25.000Z</published>
    <updated>2014-08-09T05:58:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="这一篇主要讨论整个RAC安装过程中碰到的问题以及是如何解决的。">这一篇主要讨论整个RAC安装过程中碰到的问题以及是如何解决的。</h2>
<h3 id="错误一：">错误一：</h3>
<p>配置共享磁盘的问题。如果共享磁盘本身有内容，可能会导致在安装完CLUSTERWARE后，执行root.sh时出错，错误信息为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed <span class="keyword">to</span> upgrade Oracle Cluster Registry <span class="keyword">configuration</span>。</div></pre></td></tr></table></figure>



<p>这时可以利用dd命令来清除ocr和voting disk的共享磁盘。类似命令为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd <span class="variable">if=</span>/dev/zero <span class="variable">of=</span>/dev/rdsk/c2t0d2s3 <span class="variable">bs=</span><span class="number">1073741824</span> <span class="variable">count=</span><span class="number">1</span></div></pre></td></tr></table></figure>

<p>其中of指定需要清除的共享磁盘设备，而bs指定该设备的空间大小。<br>清除之后，再次运行root.sh，则问题消失。<br><a id="more"></a>  </p>
<h3 id="错误二：">错误二：</h3>
<p>Oracle默认不会使用s0分区，如果指定了s0分区作为ocr或voting disk,<br>那么在执行root.sh时也会收到同样的错误信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed <span class="keyword">to</span> upgrade Oracle Cluster Registry <span class="keyword">configuration</span>。</div></pre></td></tr></table></figure>

<p>这个时候可以指定其他的分区来替换s0分区。</p>
<h3 id="错误三：">错误三：</h3>
<p>vip找不到public interface的问题。这个问题实际上是Oracle的bug。<br>Oracle认为192.168.<em>.</em>、10.<em>.</em>.<em>、172.16.</em>.<em>——172.31.</em>.*等ip属于private IP。因此无法自动绑定到interface上。<br>在使用cluvfy工具验证时会出现下面的错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR: Could <span class="operator">not</span> find <span class="operator">a</span> suitable <span class="built_in">set</span> <span class="operator">of</span> interfaces <span class="keyword">for</span> VIPs.</div></pre></td></tr></table></figure>

<p>而在安装完ClusterWare后，第二个节点执行root.sh脚本之后，会出现下面的错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The given <span class="keyword">interface</span>(s), <span class="string">"ce0"</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">public</span>. <span class="keyword">Public</span> interfaces should be used <span class="keyword">to</span> configure virtual IPs.</div></pre></td></tr></table></figure>

<p>这个的解决方法就是用root身份手工启动VIPCA，进行手工配置。</p>
<p>Oracle对这个问题的详细描述是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Doc ID:Note:<span class="number">316583.1</span>：Subject:VIPCA FAILS COMPLAINING THAT <span class="keyword">INTERFACE</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">PUBLIC</span>。</div></pre></td></tr></table></figure>

<p>相关的bug信息是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bug <span class="number">4437727</span> - VIPCA FAILS COMPLAINING THAT <span class="keyword">INTERFACE</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">PUBLIC</span>。</div></pre></td></tr></table></figure>



<h3 id="错误四：">错误四：</h3>
<p>那就是如果没有设置默认的网关信息，那么手工配置VIPCA的时候会出错。<br>如果/etc/defaultrouter没有正确的配置，那么启动vipca后，进行正确的配置。<br>Oracle会执行6个步骤，Create VIP application resource、Create GSD application resource、Create ONS application resource、Start VIP application resource、Start GSD application resource、Start ONS application resource。</p>
<p>当执行到第四个步骤Starting VIP application resource时后出现错误。错误信息为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CRS-1006</span>: <span class="string">No more members to consider   </span></div><div class="line"><span class="attribute">CRS-0215</span>: <span class="string">Could not start resource 'racnode1-vip'.   </span></div><div class="line"><span class="attribute">CRS-1006</span>: <span class="string">No more members to consider   </span></div><div class="line"><span class="attribute">CRS-0215</span>: <span class="string">Could not start resource 'racnode2-vip'.</span></div></pre></td></tr></table></figure>


<p>配置了默认路由，就可以解决这个问题了。</p>
<h3 id="错误五：">错误五：</h3>
<p>也是在安装ClusterWare时碰到的。对于绑定PRIVATE ID的概念理解的不是很清晰，在加上cluvfy工具验证时出现的错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR: Could <span class="operator">not</span> find <span class="operator">a</span> suitable <span class="built_in">set</span> <span class="operator">of</span> interfaces <span class="keyword">for</span> VIPs.</div></pre></td></tr></table></figure>

<p>因此尝试手工通过下面的命令绑定VIP。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">ifconfig</span> eth0:<span class="number">1</span> plumb  </div><div class="line">ifconfig eth0:<span class="number">1</span> <span class="number">172.25.198.224</span> netmask <span class="number">255.255.0.0</span>              broadcast <span class="number">172.25.255.255</span> up</div></pre></td></tr></table></figure>

<p>但是Oracle需要自动绑定这个虚拟IP，这种通过手工绑定的方式会导致ClusterWare安装配置IP时出现下面的错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SEVERE: The virtual hostname(s), vip-node1,vip-node2, you have specified appears <span class="built_in">to</span> be already assigned <span class="built_in">to</span> another <span class="keyword">system</span> <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">network</span></span></div></pre></td></tr></table></figure>

<p>解决方法就是去掉手工绑定的VIP，通过Oracle的配置工具使得Oracle自动进行绑定。</p>
<h3 id="错误六：">错误六：</h3>
<p>在数据库安装阶段碰到了。在Oracle编译racg_install时出现编译错误。检查log文件发现类似下面的问题：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">makefile</span> <span class="string">'/data/oracle/product/10.2/racg/lib/ins_has.mk'</span> 的目标 <span class="string">'racg_install'</span> 时出错。</div></pre></td></tr></table></figure>

<p>在make.log中出现类型下面的错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">racg_install</span>// <span class="typedef"><span class="keyword">data</span> /oracle/product/10.2/racg/lib/ins_has.mk:7: /<span class="keyword">data</span>/oracle/product/10.2/crs/lib/env_has.mk: </span></div><div class="line">没有那个文件或目录 make:\*** 没有规则可以创建目标“/<span class="typedef"><span class="keyword">data</span>/oracle/product/10.2/crs/lib/env_has.mk”。 停止。</span></div></pre></td></tr></table></figure>

<p>根据错误信息发现是找不到env_has.mk文件造成的问题。而这个错误居然在METALINK和GOOGLE上都找不到产生问题的原因。</p>
<p>到$ORACLE_HOME/crs/lib目录下，确实找不到相应的env_has.mk。但是在$ORACLE_HOME/crs/crs/lib目录下可以找到这个文件。</p>
<p>造成这个错误出现的主要原因是CRS的主目录和ORACLE_HOME主目录出现冲突。</p>
<p>当时设置的ORACLE_HOME是/data/oracle/product/10.2，而安装Oracle的ClusterWare时指定的主目录是/data/oracle/product/10.2/crs。由于两个目录存在着嵌套关系，导致了这个问题的产生。</p>
<p>而后将ORACLE_HOME设置为/data/oracle/product/10.2/database，而Oracle的ClusterWare目录不变，仍为/data/oracle/product/10.2/crs，错误不在出现。</p>
<h3 id="错误七：">错误七：</h3>
<p>在第二次重建系统时出现的。由于存储设备没有进行格式化。因此存储设备本身保留了ASM的配置信息。</p>
<p>这种情况下第一次已经分配的ASM磁盘对于新的ASM实例是不可用的。</p>
<p>解决方法是通过第一个问题中介绍的清除ocr和voting disk的方式来清除裸设备的信息，比如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd <span class="variable">if=</span>/dev/zero <span class="variable">of=</span>/dev/rdsk/c2t0d2s3 <span class="variable">bs=</span><span class="number">1073741824</span> <span class="variable">count=</span><span class="number">1</span></div></pre></td></tr></table></figure>

<p>更为重要的是，选择ASM磁盘组的时候，不能选择和上次配置同名的磁盘组，否则会出现错误信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ORA-15032和ORA-15063。</div></pre></td></tr></table></figure>

<p>指定另外的ASM磁盘组名称后，问题得以解决。</p>
<h3 id="错误八：">错误八：</h3>
<p>在安装5117016补丁集后出现的节点2上的数据库无法启动的错误。</p>
<p>错误信息为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ORA-<span class="number">01078</span>: failure <span class="keyword">in</span> processing system parameters </div><div class="line">ORA-<span class="number">01565</span>: <span class="keyword">error</span> <span class="keyword">in</span> identifying <span class="type">file</span> '+DISK/testrac/spfiletestrac.ora' </div><div class="line">ORA-<span class="number">17503</span>: ksfdopn:<span class="number">2</span> Failed <span class="keyword">to</span> open <span class="type">file</span> +DISK/testrac/spfiletestrac.ora </div><div class="line">ORA-<span class="number">03113</span>: <span class="keyword">end</span>-<span class="keyword">of</span>-<span class="type">file</span> <span class="function_start"><span class="keyword">on</span></span> communication channel</div></pre></td></tr></table></figure>

<p>同时从后台的alert文件中可以看到如下的错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Errors <span class="keyword">in</span> <span class="keyword">file</span> /data/oracle/admin/testrac/udump/testrac2_ora_4598.trc: </div><div class="line">ORA-<span class="number">07445</span>: 出现异常错误: 核心转储 [kkxcms()+<span class="number">1160</span>] [SIGSEGV] [Address <span class="keyword">not</span> mapped <span class="keyword">to</span> <span class="keyword">object</span>] [<span class="number">0</span>x000000168] [] []</div></pre></td></tr></table></figure>

<p>Oracle的Note:390591.1上有详细的描述和解决方法。</p>
<p>整个过程碰到的比较麻烦和难于处理的问题都已经列出来了。安装过程中碰到的小问题更多。可能这些问题对于一个有了一定安装经验的人来说，不算什么。 但是对于缺少安装经验的人或者第一次尝试安装RAC环境的人，每个问题都是一次考验。考验你是否进行了充分的知识准备；考验你的问题分析、解决能力；考验 你搜索、寻找问题解决方法的能力；最重要的是考验你的信心、耐心和毅力。</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="这一篇主要讨论整个RAC安装过程中碰到的问题以及是如何解决的。">这一篇主要讨论整个RAC安装过程中碰到的问题以及是如何解决的。</h2>
<h3 id="错误一：">错误一：</h3>
<p>配置共享磁盘的问题。如果共享磁盘本身有内容，可能会导致在安装完CLUSTERWARE后，执行root.sh时出错，错误信息为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed <span class="keyword">to</span> upgrade Oracle Cluster Registry <span class="keyword">configuration</span>。</div></pre></td></tr></table></figure>



<p>这时可以利用dd命令来清除ocr和voting disk的共享磁盘。类似命令为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd <span class="variable">if=</span>/dev/zero <span class="variable">of=</span>/dev/rdsk/c2t0d2s3 <span class="variable">bs=</span><span class="number">1073741824</span> <span class="variable">count=</span><span class="number">1</span></div></pre></td></tr></table></figure>

<p>其中of指定需要清除的共享磁盘设备，而bs指定该设备的空间大小。<br>清除之后，再次运行root.sh，则问题消失。<br>]]></summary>
    
      <category term="Oracle" scheme="http://wlcyhao.github.io/tags/Oracle/"/>
    
      <category term="RAC" scheme="http://wlcyhao.github.io/tags/RAC/"/>
    
      <category term="Oracle" scheme="http://wlcyhao.github.io/categories/Oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[让虚拟机支持安装64位操作系统的处理方法]]></title>
    <link href="http://wlcyhao.github.io/2014/08/09/VirtuleMachine-Support64bit/"/>
    <id>http://wlcyhao.github.io/2014/08/09/VirtuleMachine-Support64bit/</id>
    <published>2014-08-09T02:59:39.000Z</published>
    <updated>2014-08-09T06:04:03.000Z</updated>
    <content type="html"><![CDATA[<p>尝试虚拟的操作系统是CentOS-5.4-x86_64，因此在系统选项中选择了Other Linux 64bit，尝试系统后系统报错：  </p>
<p>This CPU is VT-capable, but VT is not enabled (check your BIOS settings).<br>You have configured this virtual machine as a 64-bit guest operating system. However, this host’s CPU is not capable of running 64-bit virtual machines or this virtual machine has 64-bit support disabled.<br>For more detailed information, see <a href="http://www.vmware.com/info?id=152" target="_blank" rel="external">http://www.vmware.com/info?id=152</a></p>
<p><a id="more"></a><br>点击确定，屏幕显示错误信息为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Your CPU does <span class="operator">not</span> support <span class="keyword">long</span> mode. Use <span class="operator">a</span> <span class="number">32</span>bit distribution.</div></pre></td></tr></table></figure>

<p>对于这种情况，需要设置本机的BIOS，将【Inter Virtualization Technology】选项设置为：<strong>ENABLE</strong>，然后重启系统，就可以了.</p>
<p><strong>注意</strong>：这里指的是本机的BIOS，而非虚拟机的BIOS，如果BIOS设置了没有类似的设置，那么系统就无法虚拟64位的系统了。</p>
]]></content>
    <summary type="html"><![CDATA[<p>尝试虚拟的操作系统是CentOS-5.4-x86_64，因此在系统选项中选择了Other Linux 64bit，尝试系统后系统报错：  </p>
<p>This CPU is VT-capable, but VT is not enabled (check your BIOS settings).<br>You have configured this virtual machine as a 64-bit guest operating system. However, this host’s CPU is not capable of running 64-bit virtual machines or this virtual machine has 64-bit support disabled.<br>For more detailed information, see <a href="http://www.vmware.com/info?id=152" target="_blank" rel="external">http://www.vmware.com/info?id=152</a></p>
<p>]]></summary>
    
      <category term="虚拟机，64位" scheme="http://wlcyhao.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%8C64%E4%BD%8D/"/>
    
      <category term="虚拟机" scheme="http://wlcyhao.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Hexo搭建Blog]]></title>
    <link href="http://wlcyhao.github.io/2014/08/08/Hexo-buildblog/"/>
    <id>http://wlcyhao.github.io/2014/08/08/Hexo-buildblog/</id>
    <published>2014-08-08T08:01:14.000Z</published>
    <updated>2014-08-14T01:23:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="注意：本文只针对Windows用户。">注意：本文只针对Windows用户。</h3>
<h2 id="安装Git">安装Git</h2>
<p>下载<a href="http://msysgit.github.io/" target="_blank" rel="external">msysgit</a> 并执行即可完成安装。</p>
<h2 id="安装Node-js">安装Node.js</h2>
<p>在 Windows 环境下安装 Node.js 非常简单，仅须<a href="http://nodejs.org/" target="_blank" rel="external">下载</a>安装文件并执行即可完成安装。</p>
<p><a id="more"></a></p>
<h2 id="安装hexo">安装hexo</h2>
<p>利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）</p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> -g hexo</span>
</code></pre><h2 id="创建hexo文件夹">创建hexo文件夹</h2>
<p>安装完成后，在你喜爱的文件夹下（如D:\hexo），执行以下指令(在D:\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>
<pre><code>hexo <span class="keyword">init</span>
</code></pre><h2 id="安装依赖包">安装依赖包</h2>
<pre><code>npm <span class="operator"><span class="keyword">install</span></span>
</code></pre><h2 id="本地查看">本地查看</h2>
<p>现在我们已经搭建起本地的hexo博客了，执行以下命令(在D:\hexo)，然后到浏览器输入:<a href="localhost:4000" target="_blank" rel="external">地址</a>看看。</p>
<pre><code>hexo generate                                
hexo <span class="keyword">server</span>
</code></pre><h2 id="安装light主题">安装light主题</h2>
<h3 id="Install">Install</h3>
<pre><code>git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/hexojs/hexo-theme-light.git themes/light
</code></pre><h3 id="Update">Update</h3>
<pre><code><span class="built_in">cd</span> themes/light

git pull
</code></pre><p>好了，至此，本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p>
<h2 id="注册Github账号">注册Github账号</h2>
<p>已有账号可以跳过，没有的，请<a href="https://github.com/" target="_blank" rel="external">在此</a>进行注册，很简单，这里就不介绍了。</p>
<h2 id="创建repository">创建repository</h2>
<p>在自己<a href="https://github.com/" target="_blank" rel="external">Github</a>主页右下角，创建一个新的repository。比如我的<a href="https://github.com/" target="_blank" rel="external">Github</a>账号是abc，那么我应该创建的repository名字应该是abc.github.io。</p>
<h2 id="部署">部署</h2>
<p>编辑_config.yml(在D:\hexo下)。你在部署时，要把下面的abc都换成你的账号名。</p>
<pre><code><span class="attribute">deploy</span>: <span class="string">          </span>
<span class="attribute">type</span>: <span class="string">github</span>
<span class="attribute">repository</span>: <span class="string">https://github.com/abc/abc.github.io.git</span>
<span class="attribute">branch</span>: <span class="string">master</span>
</code></pre><p>执行下列指令即可完成部署。</p>
<pre><code>hexo <span class="keyword">generate</span>
hexo deploy
</code></pre><p><strong>注意</strong>：有些新用户需要设置 ssh，否则上述命令会失败。ssh 的介绍和设置方法请看<a href="https://help.github.com/articles/generating-ssh-keys" target="_blank" rel="external">官方教程</a>，不用担心，很简单。</p>
<p><strong>记住</strong>：每次修改本地文件后，需要hexo generate才能保存。每次使用命令时，都要在D:\hexo目录下。<br>Okay,我们的博客已经完全搭建起来了，在浏览器访问abc.github.io就能看到你的成就了！</p>
<h2 id="tips">tips</h2>
<p>hexo现在支持更加简单的命令格式了，比如：</p>
<p>hexo g == hexo generate</p>
<p>hexo d == hexo deploy</p>
<p>hexo s == hexo server</p>
<p>hexo n == hexo new</p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="注意：本文只针对Windows用户。">注意：本文只针对Windows用户。</h3>
<h2 id="安装Git">安装Git</h2>
<p>下载<a href="http://msysgit.github.io/" target="_blank" rel="external">msysgit</a> 并执行即可完成安装。</p>
<h2 id="安装Node-js">安装Node.js</h2>
<p>在 Windows 环境下安装 Node.js 非常简单，仅须<a href="http://nodejs.org/" target="_blank" rel="external">下载</a>安装文件并执行即可完成安装。</p>
<p>]]></summary>
    
      <category term="Hexo" scheme="http://wlcyhao.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://wlcyhao.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://wlcyhao.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用rlwrap调用sqlplus中历史命令]]></title>
    <link href="http://wlcyhao.github.io/2014/08/07/rlwrap-sqlplus/"/>
    <id>http://wlcyhao.github.io/2014/08/07/rlwrap-sqlplus/</id>
    <published>2014-08-07T08:05:12.000Z</published>
    <updated>2014-08-08T08:22:18.000Z</updated>
    <content type="html"><![CDATA[<p>当在Linux Shell中运行SQL*Plus的时候，并不提供浏览历史命令行的功能。为了在Linux中达到“使用向上，向下键来跳回之前已经执行过的SQL语句”的目的，可以安装 rlwrap。</p>
<p>rlwrap最新的版本rlwrap-0.37.tar.gz，<br><a id="more"></a><br>[官方主页]：<a href="http://utopia.knoware.nl/~hlub/uck/rlwrap/" target="_blank" rel="external">http://utopia.knoware.nl/~hlub/uck/rlwrap/</a></p>
<p>安装完成后，可使用如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/rlwrap/</span>bin<span class="regexp">/rlwrap sqlplus</span></div></pre></td></tr></table></figure>

<p>然后就可以使用 上、下、左、右 键来编辑已执行过的命令；</p>
<p>如果嫌每次输入这么长的命令很麻烦的话，可以在 oracle用户下的  <strong>.bash_profil</strong>中加入一条alias，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> sqlplus=<span class="string">'/usr/local/rlwrap/bin/rlwrap sqlplus'</span></div></pre></td></tr></table></figure>

<p>这样每次只要直接输入 sqlplus命令就可以使用回调命令的功能了。</p>
]]></content>
    <summary type="html"><![CDATA[<p>当在Linux Shell中运行SQL*Plus的时候，并不提供浏览历史命令行的功能。为了在Linux中达到“使用向上，向下键来跳回之前已经执行过的SQL语句”的目的，可以安装 rlwrap。</p>
<p>rlwrap最新的版本rlwrap-0.37.tar.gz，<br>]]></summary>
    
      <category term="Oracle" scheme="http://wlcyhao.github.io/tags/Oracle/"/>
    
      <category term="sqlplus" scheme="http://wlcyhao.github.io/tags/sqlplus/"/>
    
      <category term="Oracle" scheme="http://wlcyhao.github.io/categories/Oracle/"/>
    
  </entry>
  
</feed>
